<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="14.2">
  <zoom_level>6</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1296</x>
      <y>726</y>
      <w>198</w>
      <h>42</h>
    </coordinates>
    <panel_attributes>bg=orange
/Core::Object/ -
-
int id;
ObjectType type;</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1260</x>
      <y>870</y>
      <w>294</w>
      <h>126</h>
    </coordinates>
    <panel_attributes>bg=orange
/Core::Scene : Core::Object/ -
-
virtual void update(float delta) = 0;
virtual void draw(float delta) = 0;
virtual void destroy() = 0;
virtual void load(float * progress) = 0;
virtual void start() = 0;
virtual void end() = 0;
virtual void save(DataManager * dataManager) = 0;

	</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1374</x>
      <y>762</y>
      <w>18</w>
      <h>120</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;180.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1716</x>
      <y>870</y>
      <w>324</w>
      <h>72</h>
    </coordinates>
    <panel_attributes>bg=orange
/Core::DataManager/
-
virtual void getObjectData(std::vector&lt;ObjectData&gt; * data , float * progress) =0;
virtual void startSaveChain()=0;
virtual void save(ObjectData objectData)=0;
virtual void save()=0;</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1548</x>
      <y>864</y>
      <w>180</w>
      <h>18</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>280.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1794</x>
      <y>546</y>
      <w>306</w>
      <h>174</h>
    </coordinates>
    <panel_attributes>bg=#eeeeee
/ObjectData-/
-
bool hasKey(std::string key, bool optional = true)

std::string getString(std::string key, bool optional = true)
 int getInt(std::string key, bool optional = true)
bool getBool(std::string key, bool optional = true)
float getFloat(std::string key, bool optional = true)

void add(Pair&lt;std::string, std::string&gt; pair)
void setString(std::string key, std::string val)
void setInt(std::string key, int val)
void setFloat(std::string key, float val)
void setBool(std::string key, bool flag)

void print();
std::string toString();</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1890</x>
      <y>714</y>
      <w>18</w>
      <h>168</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;260.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1254</x>
      <y>1296</y>
      <w>270</w>
      <h>102</h>
    </coordinates>
    <panel_attributes>bg=#eeeeee
/ObjectManager-/
-
MAX_OBJECTS 1000
-
bool add(Object * o, bool fixedId = false);
bool remove(Object * o);
Object * get(int id);
virtual void freeObjects();
virtual Object * getFirst();
virtual Object * getNext();
int getObjectCount() const;</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1248</x>
      <y>1062</y>
      <w>306</w>
      <h>168</h>
    </coordinates>
    <panel_attributes>bg=orange
/Core::SceneManager : ObjectManager/
-
virtual void start() = 0;
virtual void startScene(Scene * scene) = 0;
virtual void startScene(int id) = 0;
virtual void loadScene(Scene * scene) = 0;
virtual void loadScene(int id) = 0;
virtual void endScene(Scene * scene) = 0;
virtual void endScene(int id) = 0;
virtual void baseUpdate() = 0;
virtual void update(float delta) = 0;
virtual void draw(float delta) = 0;
virtual void save() = 0;
virtual void destroy() = 0;
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1392</x>
      <y>990</y>
      <w>18</w>
      <h>84</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;120.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1386</x>
      <y>1224</y>
      <w>18</w>
      <h>84</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;120.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>756</x>
      <y>1002</y>
      <w>282</w>
      <h>114</h>
    </coordinates>
    <panel_attributes>bg=orange
/Core::Window/
-
virtual bool isOpen() const = 0;
virtual void clear() = 0;
virtual void display() = 0;
virtual void draw(DreamEngine::Core::Drawable * drawable) = 0;
virtual void close() = 0;
virtual void show(bool flag=true) = 0;
virtual sf::RenderWindow * getWindow() = 0;

Timer frameTimer;</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>834</x>
      <y>774</y>
      <w>282</w>
      <h>84</h>
    </coordinates>
    <panel_attributes>bg=orange
/Core::Drawable : Core::Object-/
-
virtual void draw() = 0;
virtual void onDestroy() = 0;
virtual void load() = 0;
virtual ObjectData save() = 0;</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1008</x>
      <y>852</y>
      <w>18</w>
      <h>168</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;260.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1110</x>
      <y>720</y>
      <w>198</w>
      <h>66</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>310.0;10.0;10.0;10.0;10.0;90.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1164</x>
      <y>468</y>
      <w>342</w>
      <h>162</h>
    </coordinates>
    <panel_attributes>bg=orange
/Core::WorldObject : Core::Object-/
-
bool destroyObject = false;
bool isColliding = false;
-
virtual void instantiate(ObjectData data) = 0;
virtual void destroy() = 0;
virtual void onDestroy() = 0;
virtual void draw(float delta) = 0;
virtual ObjectData save() = 0;

void beginCollision();
void endCollision();
virtual void beginActorCollision(void * other, b2Contact * contact) = 0;
virtual void endActorCollision(void * other, b2Contact * contact) = 0;
virtual void beginShapeCollision(void * other, b2Contact * contact) = 0;
virtual void endShapeCollision(void * other, b2Contact * contact) = 0;</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1500</x>
      <y>600</y>
      <w>306</w>
      <h>18</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>490.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1380</x>
      <y>624</y>
      <w>18</w>
      <h>114</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;170.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1404</x>
      <y>360</y>
      <w>270</w>
      <h>60</h>
    </coordinates>
    <panel_attributes>bg=#eeeeee
/Core::Shape : Core::WorldObject-/
-
Actor * parent;
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1242</x>
      <y>414</y>
      <w>18</w>
      <h>66</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;90.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1434</x>
      <y>414</y>
      <w>18</w>
      <h>66</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;90.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1320</x>
      <y>354</y>
      <w>96</w>
      <h>18</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;140.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1710</x>
      <y>1086</y>
      <w>306</w>
      <h>42</h>
    </coordinates>
    <panel_attributes>bg=orange
/Core::Builder/
-
virtual void build(std::vector&lt;ObjectData&gt; data, float * progress) = 0;</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1632</x>
      <y>1488</y>
      <w>306</w>
      <h>42</h>
    </coordinates>
    <panel_attributes>/Builder/
-
void addBuilder(DreamEngine::Core::ObjectBuilder* customBuilder);

bg=#eeeeee</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1932</x>
      <y>1500</y>
      <w>366</w>
      <h>18</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>590.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>2286</x>
      <y>1464</y>
      <w>324</w>
      <h>96</h>
    </coordinates>
    <panel_attributes>/ObjectBuilder/
-
SceneManager * sceneManager;
Window * window;
CameraManager * cameraManager;
-
virtual bool doesBuild(OBJECTS type);
virtual void build(ObjectData data, OBJECTS type) = 0;
ObjectBuilderDefinition builderComponents;

bg=#eeeeee</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1548</x>
      <y>1212</y>
      <w>798</w>
      <h>264</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;880.0;10.0;1310.0;420.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1032</x>
      <y>1086</y>
      <w>1266</w>
      <h>402</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;650.0;2090.0;650.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>696</x>
      <y>1554</y>
      <w>180</w>
      <h>66</h>
    </coordinates>
    <panel_attributes>/CameraManager/
-
Camera * get(Cameras camera);
void draw(sf::RenderWindow * window);

bg=#eeeeee</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>678</x>
      <y>1320</y>
      <w>264</w>
      <h>156</h>
    </coordinates>
    <panel_attributes>/Window/
-
virtual bool isOpen() const override;
virtual void clear() override;
virtual void display() override;
virtual void draw(Core::Drawable * drawable) override;
virtual void close() override;
virtual void show(bool flag = true) override;
sf::RenderWindow * getWindow() const;
void setCameraManager(CameraManager * cameraManager);

Timer frameTimer;
FPSCounter fpsCounter;

bg=#eeeeee</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>858</x>
      <y>1110</y>
      <w>18</w>
      <h>222</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;350.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>804</x>
      <y>1470</y>
      <w>18</w>
      <h>96</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;140.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>282</x>
      <y>1584</y>
      <w>348</w>
      <h>144</h>
    </coordinates>
    <panel_attributes>/Camera-/
-
virtual void move(sf::Vector2f offset);
virtual void setCameraScreenPosition(sf::Vector2f position);
virtual void setCameraWorldPosition(b2Vec2 position);
virtual void setViewport(float ratioX, float ratioY, float widthRatio, float heightRatio);
virtual void rotate(float degrees);
virtual void setRotation(float degrees);
virtual b2Vec2 getWindowWorldSize();
virtual sf::View getView();
virtual sf::Vector2f getScreenPosition();
virtual void draw(Core::Drawable * drawable);
virtual void display();

bg=#eeeeee</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>624</x>
      <y>1578</y>
      <w>84</w>
      <h>18</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;120.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>564</x>
      <y>792</y>
      <w>282</w>
      <h>804</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>450.0;10.0;10.0;10.0;10.0;1320.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>900</x>
      <y>1212</y>
      <w>120</w>
      <h>66</h>
    </coordinates>
    <panel_attributes>Timer-
-
		virtual void start();
		virtual void restart();
		virtual float getElapsedTime();


bg=#eeeeee</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>894</x>
      <y>1110</y>
      <w>72</w>
      <h>114</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;170.0;10.0;70.0;100.0;70.0;100.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>888</x>
      <y>1626</y>
      <w>84</w>
      <h>36</h>
    </coordinates>
    <panel_attributes>FPSCounter-
-
int getFrames();

bg=#eeeeee</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>912</x>
      <y>1470</y>
      <w>18</w>
      <h>168</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;260.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>528</x>
      <y>486</y>
      <w>234</w>
      <h>60</h>
    </coordinates>
    <panel_attributes>bg=orange
/Animation-/
-
std::string getName() const;
virtual sf::IntRect update();</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>228</x>
      <y>306</y>
      <w>168</w>
      <h>72</h>
    </coordinates>
    <panel_attributes>/struct Frame/
-
float duration
sf::Vector2i size
sf::Vector2i offset

bg=#eeeeee</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>834</x>
      <y>480</y>
      <w>204</w>
      <h>84</h>
    </coordinates>
    <panel_attributes>bg=#eeeeee
AnimationManager : Core::ObjectManager-
-
Animation * getAnimation(std::string name);
		Animation * get(int index);</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1020</x>
      <y>558</y>
      <w>246</w>
      <h>750</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>390.0;1230.0;190.0;1230.0;190.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>756</x>
      <y>510</y>
      <w>90</w>
      <h>18</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;130.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1254</x>
      <y>1566</y>
      <w>270</w>
      <h>60</h>
    </coordinates>
    <panel_attributes>bg=#eeeeee
WorldObjectManager
-
void draw(float delta);
virtual void update(float delta);
virtual bool destroyObject(DreamEngine::Core::WorldObject * o);
virtual void destroyObjects();</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1374</x>
      <y>1392</y>
      <w>18</w>
      <h>186</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;290.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1176</x>
      <y>624</y>
      <w>90</w>
      <h>954</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;1570.0;130.0;1570.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1854</x>
      <y>1122</y>
      <w>18</w>
      <h>378</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;610.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>552</x>
      <y>324</y>
      <w>150</w>
      <h>18</h>
    </coordinates>
    <panel_attributes>Animation : Core::Animation
bg=#eeeeee</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>630</x>
      <y>336</y>
      <w>18</w>
      <h>162</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;250.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>390</x>
      <y>336</y>
      <w>174</w>
      <h>18</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;270.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1392</x>
      <y>1488</y>
      <w>234</w>
      <h>60</h>
    </coordinates>
    <panel_attributes>/CollisionListener/
bg=orange
-
void BeginContact(b2Contact* contact);
		void EndContact(b2Contact* contact);

		void runCollisions();</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1512</x>
      <y>1542</y>
      <w>18</w>
      <h>36</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;40.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1548</x>
      <y>720</y>
      <w>228</w>
      <h>108</h>
    </coordinates>
    <panel_attributes>lt=.
OBJECTS
-
OBJECT
DRAWABLE
SHAPE
ACTOR
SCENE
CAMERA
bg=#eeeeee</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>372</x>
      <y>672</y>
      <w>192</w>
      <h>48</h>
    </coordinates>
    <panel_attributes>Drawable : CoreDrawable-
bg=#eeeeee
-
Window * window</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>558</x>
      <y>690</y>
      <w>288</w>
      <h>96</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>460.0;140.0;460.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>528</x>
      <y>714</y>
      <w>240</w>
      <h>300</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>380.0;480.0;10.0;480.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>0</x>
      <y>714</y>
      <w>192</w>
      <h>54</h>
    </coordinates>
    <panel_attributes>Sprite : Drawable-
bg=#eeeeee
-
void setAnimation(std::string name);
void setAngle(float angle);
void setPosition(b2Vec2 bodyPosition);
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>186</x>
      <y>666</y>
      <w>198</w>
      <h>60</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>310.0;10.0;10.0;10.0;10.0;80.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>114</x>
      <y>432</y>
      <w>732</w>
      <h>294</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>1200.0;80.0;1200.0;10.0;10.0;10.0;10.0;470.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1056</x>
      <y>360</y>
      <w>270</w>
      <h>60</h>
    </coordinates>
    <panel_attributes>bg=#eeeeee
/ Core::Actor : Core::WorldObject-/
-
virtual void update(float delta) = 0;

</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>480</x>
      <y>378</y>
      <w>84</w>
      <h>42</h>
    </coordinates>
    <panel_attributes>Split core from 
basic in code</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>2166</x>
      <y>1398</y>
      <w>84</w>
      <h>42</h>
    </coordinates>
    <panel_attributes>Add Core ObjectBuilder</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1812</x>
      <y>0</y>
      <w>864</w>
      <h>336</h>
    </coordinates>
    <panel_attributes>bg=#eeeeee
WorldComponentsBuilder
-

static b2BodyDef createBodyDef(b2BodyType type = b2_staticBody, b2Vec2 position = { 0,0 }, void * userData = nullptr);
		static b2BodyDef createBodyDef(bool isBullet, b2BodyType type = b2_staticBody, b2Vec2 position = { 0,0 }, void * userData = nullptr);
		static void setBodyDefPosition(b2BodyDef &amp;bodyDef, b2Vec2 position);

		static b2FixtureDef createFixtureDef(float density = 1.f, float friction = 1.f, float restitution = 0.f, bool isSensor = false);
		static b2FixtureDef createFixtureDef(b2Shape * shape, float density = 1.f, float friction = 1.f, float restitution = 0.f);
		static b2FixtureDef createFixtureDef(b2Shape * shape, bool isSensor, float density = 1.f, float friction = 1.f, float restitution = 0.f);

		static b2PolygonShape createPolygonShape(b2Vec2 * vertices, int size);
		static b2PolygonShape createPolygonShape(std::vector&lt;b2Vec2&gt; vertices);

		static b2EdgeShape createEdgeShape(b2Vec2 start, b2Vec2 end);

		static b2CircleShape createCircleShape(b2Vec2 localPosition, float32 radius);

		static b2Body * instantiateBody(b2BodyDef &amp;bodyDef, b2World * world);
		static b2Fixture * instantiateFixture(b2FixtureDef &amp;fixtureDef, b2Body * body);

		//static Shape * instantiateShape(ShapeDefinition shapeDef, b2World * world);

		class Joints {
		public:
			static b2Joint * instantiateJoint(b2JointDef * jointDef, b2World * world);
			static b2DistanceJointDef createDistanceJointDef(b2Body * bodyA, b2Vec2 localAnchorA, b2Body * bodyB, b2Vec2 localAnchorB, bool collideConnected = false, void * userData = nullptr);
			static b2RevoluteJointDef createRevoluteJointDef(b2Body * bodyA, b2Vec2 localAnchorA, b2Body * bodyB, bool collideConnected = false, void * userData = nullptr);
			static b2RevoluteJointDef createRevoluteJointDef(b2Body * bodyA, b2Vec2 localAnchorA, b2Body * bodyB, float32 upperAngle, float32 lowerAngle, bool collideConnected = false, void * userData = nullptr);
			static b2RevoluteJointDef createRevoluteJointDefMotor(b2Body * bodyA, b2Vec2 localAnchorA, b2Body * bodyB, float32 motorSpeed, float32 maxMotorSpeed, bool collideConnected = false, void * userData = nullptr);
			static b2WheelJointDef createWheelJointDef(b2Body * bodyA, b2Vec2 localAnchorA, b2Body * bodyB, b2Vec2 localAnchorB, bool collideConnected = false, void * userData = nullptr);
			static b2WheelJointDef createWheelJointDef(b2Body * bodyA, b2Vec2 localAnchorA, b2Body * bodyB, b2Vec2 localAnchorB, float32 motorSpeed, float32 maxMotorspeed, bool collideConnected = false, void * userData = nullptr);
			static b2PrismaticJointDef createPrismaticJointDef(b2Body * bodyA, b2Vec2 localAnchorA, b2Body * bodyB, b2Vec2 worldAxis);
		};
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>2316</x>
      <y>522</y>
      <w>444</w>
      <h>162</h>
    </coordinates>
    <panel_attributes>bg=#eeeeee
/ Engine /
-
static constexpr float SCALE = 70.f;
		static constexpr int MAX_VERTICES = 10;

		static float worldToPixel(float val);
		static sf::Vector2f worldToPixel(b2Vec2 val);
		static sf::Vector2i worldToPixeli(b2Vec2 val);
		static b2Vec2 pixelToWorld(sf::Vector2i val);
		static b2Vec2 pixelToWorld(sf::Vector2f val);
		static void waitForKeyPress(std::string message = "");
		static bool intToBool(int val);
		static b2Vec2 angleToForward(float angle);
		static float radianToDeg(float angle);
		static float degToRadian(float degree);</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>2316</x>
      <y>714</y>
      <w>444</w>
      <h>72</h>
    </coordinates>
    <panel_attributes>bg=#eeeeee
/ Mouse /
-
sf::RenderWindow * window;
		sf::Vector2f getMouseScreenPosition(); //Absolute mouse position
		sf::Vector2f getMouseScreenPosition(DreamEngine::Camera * camera); //Relative mouse position to camera
		b2Vec2 getMouseWorldPosition(DreamEngine::Camera * camera);</panel_attributes>
    <additional_attributes/>
  </element>
</diagram>
